package com.nj;import android.app.ProgressDialog;import android.content.Intent;import android.gesture.Gesture;import android.gesture.GestureLibraries;import android.gesture.GestureLibrary;import android.gesture.GestureOverlayView;import android.gesture.Prediction;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.net.IpPrefix;import android.os.Bundle;import android.os.Environment;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.SurfaceView;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.TextView;import com.bigkoo.alertview.AlertView;import com.bigkoo.alertview.OnItemClickListener;import com.blankj.utilcode.util.ActivityUtils;import com.blankj.utilcode.util.AppUtils;import com.blankj.utilcode.util.NetworkUtils;import com.blankj.utilcode.util.SPUtils;import com.blankj.utilcode.util.TimeUtils;import com.blankj.utilcode.util.ToastUtils;import com.drv.card.CardInfoRk123x;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.jakewharton.rxbinding2.widget.RxTextView;import com.nj.EventBus.LockUpEvent;import com.nj.EventBus.NetworkEvent;import com.nj.EventBus.OpenDoorEvent;import com.nj.EventBus.PassEvent;import com.nj.EventBus.TemHumEvent;import com.nj.Retrofit.RetrofitGenerator;import com.nj.Service.SwitchService;import com.nj.State.OperationState.No_one_OperateState;import com.nj.State.OperationState.One_man_OperateState;import com.nj.State.OperationState.Operation;import com.nj.State.OperationState.Two_man_OperateState;import com.nj.Tools.DAInfo;import com.nj.Tools.FileUtils;import com.nj.Tools.PersonType;import com.nj.Tools.ServerConnectionUtil;import com.nj.Tools.User;import com.nj.UI.AddPersonWindow;import com.trello.rxlifecycle2.android.ActivityEvent;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.io.IOError;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.concurrent.TimeUnit;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import io.reactivex.Observable;import io.reactivex.ObservableSource;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.annotations.NonNull;import io.reactivex.disposables.Disposable;import io.reactivex.functions.Consumer;import io.reactivex.functions.Function;import io.reactivex.schedulers.Schedulers;import okhttp3.ResponseBody;/** * Created by zbsz on 2017/8/25. */public class IndexActivity extends FunctionActivity implements AddPersonWindow.OptionTypeListener{    private static final String PREFS_NAME = "config";    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    String TAG = "IndexActivity";    Intent intent;    SPUtils courIds = SPUtils.getInstance("courId");    SPUtils courTypes = SPUtils.getInstance("courType");    SPUtils config = SPUtils.getInstance("config");    User cg_User1 = new User();    User cg_User2 = new User();    Disposable disposableTips;    private AddPersonWindow personWindow;    No_one_OperateState no_one_operateState = new No_one_OperateState();    @BindView(R.id.img_captured)    ImageView captured;    @BindView(R.id.tv_info)    TextView tv_info;    @BindView(R.id.iv_wifi)    ImageView iv_wifi;    @BindView(R.id.iv_lock)    ImageView iv_lock;    @BindView(R.id.tv_time)    TextView tv_time;    @BindView(R.id.tv_temp)    TextView tv_temperature;    @BindView(R.id.tv_humid)    TextView tv_humidity;    @BindView(R.id.gestures_overlay)    GestureOverlayView gestures;    private TextView dev_name;    private TextView ip_name;    private EditText etName;    private ImageView QRview;    private AlertView inputServerView;    @OnClick(R.id.iv_lock) void showVer() {           /* RetrofitGenerator.getTimeApi().getTime(SPUtils.getInstance(PREFS_NAME).getString("key"))                .subscribeOn(Schedulers.io()).unsubscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<ResponseBody>() {                @Override                public void onSubscribe(@NonNull Disposable d) {                }                @Override                public void onNext(@NonNull ResponseBody response) {                    try {                        Map<String, String> infoMap = new Gson().fromJson(response.string(),                                new TypeToken<HashMap<String, String>>() {                                }.getType());                        String datetime = infoMap.get("datetime");                        ToastUtils.showLong(datetime);                        AppInit.getMyManager().setTime(Integer.parseInt(datetime.substring(0,4)),Integer.parseInt(datetime.substring(5,7))                                ,Integer.parseInt(datetime.substring(8,10)),Integer.parseInt(datetime.substring(11,13)),Integer.parseInt(datetime.substring(14,16)));                    }catch (IOException e){                        e.printStackTrace();                    }                }                @Override                public void onError(@NonNull Throwable e) {                    ToastUtils.showLong(e.toString());                }                @Override                public void onComplete() {                }            });*/    }    GestureLibrary mGestureLib;    Operation global_Operation;    @OnClick(R.id.iv_wifi)    void addPerson() {        personWindow = new AddPersonWindow(this);        personWindow.setOptionTypeListener(this);        personWindow.showAtLocation(getWindow().getDecorView().findViewById(android.R.id.content), Gravity.CENTER, 0, 0);    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_index);        ButterKnife.bind(this);        EventBus.getDefault().register(this);        openService();        //AppInit.getMyManager().setEthIPAddress("192.168.12.113","255.255.255.0","192.168.12.1","202.96.134.33","192.168.12.1");        surfaceView = (SurfaceView) findViewById(R.id.surfaceView);        Observable.interval(0, 1, TimeUnit.SECONDS)                .observeOn(AndroidSchedulers.mainThread())                .compose(this.<Long>bindUntilEvent(ActivityEvent.STOP))                .subscribe(new Consumer<Long>() {                    @Override                    public void accept(@NonNull Long aLong) throws Exception {                        tv_time.setText(formatter.format(new Date(System.currentTimeMillis())));                    }                });        disposableTips = RxTextView.textChanges(tv_info)                .debounce(60, TimeUnit.SECONDS)                .switchMap(new Function<CharSequence, ObservableSource<String>>() {                    @Override                    public ObservableSource<String> apply(@NonNull CharSequence charSequence) throws Exception {                        return Observable.just("等待用户操作");                    }                })                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Consumer<String>() {                    @Override                    public void accept(@NonNull String s) throws Exception {                        tv_info.setText(s);                    }                });        global_Operation = new Operation(no_one_operateState);        setGestures();        autoUpdate();        serverInit();    }    private void autoUpdate() {        new ServerConnectionUtil().download("http://124.172.232.89:8050/daServer/updateADA.do?ver="+AppUtils.getAppVersionName()+"&daid=1234567890&url=http://222.189.59.244/"  , new ServerConnectionUtil.Callback() {            @Override            public void onResponse(String response) {                if (response != null) {                    if (response.equals("true")) {                        AppUtils.installApp(new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "Download" + File.separator + "app-release.apk"), "application/vnd.android.package-archive");                    }                }            }        });    }    private void setGestures(){        gestures.setGestureStrokeType(GestureOverlayView.GESTURE_STROKE_TYPE_MULTIPLE);        gestures.setGestureVisible(false);        gestures.addOnGesturePerformedListener(new GestureOverlayView.OnGesturePerformedListener() {            @Override            public void onGesturePerformed(GestureOverlayView overlay,                                           Gesture gesture) {                ArrayList<Prediction> predictions = mGestureLib.recognize(gesture);                if (predictions.size() > 0) {                    Prediction prediction = (Prediction) predictions.get(0);                    // 匹配的手势                    if (prediction.score > 1.0) { // 越匹配score的值越大，最大为10                        if (prediction.name.equals("setting")) {                            NetworkUtils.openWirelessSettings();                        }                    }                }            }        });        if (mGestureLib == null) {            mGestureLib = GestureLibraries.fromRawResource(this, R.raw.gestures);            mGestureLib.load();        }    }    private void serverInit(){        inputServerView = new AlertView("服务器设置,软件版本号为" + AppUtils.getAppVersionName(), null, "取消", new String[]{"确定"}, null, IndexActivity.this, AlertView.Style.Alert, new OnItemClickListener() {            @Override            public void onItemClick(Object o, int position) {            }        });        ViewGroup extView1 = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.inputserver_form, null);        dev_name = (TextView) extView1.findViewById(R.id.dev_id);        ip_name = (TextView) extView1.findViewById(R.id.dev_ip);        etName = (EditText) extView1.findViewById(R.id.server_input);        QRview = (ImageView) extView1.findViewById(R.id.QRimage) ;        inputServerView.addExtView(extView1);    }    void openService() {        intent = new Intent(IndexActivity.this, SwitchService.class);        startService(intent);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetTemHumEvent(TemHumEvent event) {        tv_temperature.setText(event.getTem() + "℃");        tv_humidity.setText(event.getHum() + "%");    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetNetworkEvent(NetworkEvent event) {        if (event.getNetwork_state()) {            iv_wifi.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.wifi));        } else {            iv_wifi.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.non_wifi));        }    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetOpenDoorEvent(OpenDoorEvent event) {        OpenDoorRecord(event.getLegal());        global_Operation.setState(no_one_operateState);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetLockUpEvent(LockUpEvent event) {        cg_User1 = new User();        cg_User2 = new User();        iv_lock.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_lockup));    }    @Override    public void onResume() {        super.onResume();        cg_User1 = new User();        cg_User2 = new User();        global_Operation.setState(no_one_operateState);        tv_info.setText("等待用户操作");    }    @Override    protected void onDestroy() {        super.onDestroy();        EventBus.getDefault().unregister(this);        stopService(intent);        disposableTips.dispose();    }    @Override    public void onOptionType(Button view, int type) {        personWindow.dismiss();        if (type == 1) {            ActivityUtils.startActivity(getPackageName(), getPackageName() + ".AddPersonActivity");        } else if (type == 2) {            Bitmap mBitmap = null;            etName.setText(RetrofitGenerator.getUri());            dev_name.setText(config.getString("daid"));            ip_name.setText(NetworkUtils.getIPAddress(true));            DAInfo di=new DAInfo();            try {                di.setId(config.getString("daid"));                di.setName("数据采集器");                di.setModel("CBDI-P-ID");                di.setSoftwareVer(AppUtils.getAppVersionName());                di.setProject("NJGY");                mBitmap = di.daInfoBmp();            }catch (Exception ex){}            if(mBitmap!=null)            {                QRview.setImageBitmap(mBitmap);            }            inputServerView.show();        } else if (type == 3) {           /* RetrofitGenerator.getCommonApi().commonFunction(RequestEnvelope.GetRequestEnvelope(                    new OnlyPutKeyModule(downPersonInfo)))                    .subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())                    .subscribe(new Observer<ResponseEnvelope>() {                        @Override                        public void onSubscribe(@NonNull Disposable d) {                        }                        @Override                        public void onNext(@NonNull ResponseEnvelope responseEnvelope) {                            List<String> dataList = responseEnvelope.body.downPersonInfoResponse.Listinfo;                            String result = dataList.get(0);                            Map<String, String> infoMap = new Gson().fromJson(result,                                    new TypeToken<HashMap<String, String>>() {                                    }.getType());                            if (infoMap.get("result").equals("checkErr")) {                                ToastUtils.showLong("设备出错");                                return;                            } else if (infoMap.get("result").equals("noData")) {                                ToastUtils.showLong("找不到相应的数据");                                return;                            } else if (infoMap.get("result").equals("true")) {                                dataList.remove(0);                                for (String siminfo : dataList) {                                    Map<String, String> simInfoMap = new Gson().fromJson(siminfo,                                            new TypeToken<HashMap<String, String>>() {                                            }.getType());                                    data = SPUtils.getInstance(simInfoMap.get("fp_id"));                                    data.put("id", simInfoMap.get("id"));                                    data.put("name", simInfoMap.get("name"));                                    data.put("type", simInfoMap.get("personType"));                                }                                ToastUtils.showLong("人员信息更新成功");                            }                        }                        @Override                        public void onError(@NonNull Throwable e) {                        }                        @Override                        public void onComplete() {                        }                    });*/        }    }    @Override    public void onCaremaText(String s) {    }    @Override    public void onSetImg(Bitmap bmp) {    }    @Override    public void onText(String msg) {        if ("请确认指纹是否已登记".equals(msg)) {            tv_info.setText("请确认指纹是否已登记,再重试");        } else if ("松开手指".equals(msg)) {            tv_info.setText(msg);        }    }    @Override    public void onFpSucc(String msg) {        loadMessage(msg.substring(3, msg.length()));    }    private void loadMessage(String sp) {        if(SPUtils.getInstance(sp).getString("courType").equals(PersonType.KuGuan)){            if (getState(No_one_OperateState.class)) {                global_Operation.setState(new One_man_OperateState());                pp.capture();                cg_User1.setCourIds(SPUtils.getInstance(sp).getString("courIds"));                cg_User1.setName(SPUtils.getInstance(sp).getString("name"));                cg_User1.setCardId(SPUtils.getInstance(sp).getString("cardId"));                cg_User1.setFingerprintId(sp);            } else if (getState(Two_man_OperateState.class)) {                if (SPUtils.getInstance(sp).getString("cardId").equals(cg_User1.getCardId())) {                    //要加！                    cg_User2.setCourIds(SPUtils.getInstance(sp).getString("courIds"));                    cg_User2.setName(SPUtils.getInstance(sp).getString("name"));                    cg_User2.setCardId(SPUtils.getInstance(sp).getString("cardId"));                    cg_User1.setFingerprintId(sp);                    pp.capture();                    EventBus.getDefault().post(new PassEvent());                    iv_lock.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_lock_unlock));                } else  {                    tv_info.setText("请不要连续输入相同的管理员信息");                }            }        }    }    @Override    public void onGetPhoto(Bitmap bmp) {        if (getState(One_man_OperateState.class)) {            cg_User1.setPhoto(FileUtils.bitmapToBase64(bmp));            tv_info.setText("管理员打卡,请继续管理员操作");            global_Operation.doNext(new Operation.Callback_Operation() {                @Override                public void uploadCallback() {                    pp.setDisplay(surfaceView.getHolder());                }            });            Observable.timer(60, TimeUnit.SECONDS).subscribeOn(Schedulers.newThread())                    .compose(this.<Long>bindUntilEvent(ActivityEvent.PAUSE))                    .observeOn(AndroidSchedulers.mainThread())                    .subscribe(new Observer<Long>() {                        @Override                        public void onSubscribe(Disposable d) {                        }                        @Override                        public void onNext(Long aLong) {                            global_Operation.setState(no_one_operateState);                            cg_User1 = new User();                            cg_User2 = new User();                        }                        @Override                        public void onError(Throwable e) {                        }                        @Override                        public void onComplete() {                        }                    });        } else if (getState(Two_man_OperateState.class)) {            tv_info.setText("管理员打卡，双人管理成功");            cg_User2.setPhoto(FileUtils.bitmapToBase64(bmp));            global_Operation.doNext(new Operation.Callback_Operation() {                @Override                public void uploadCallback() {                    pp.setDisplay(surfaceView.getHolder());                }            });        }        Matrix matrix = new Matrix();        matrix.postScale(0.5f, 0.5f);        bmp = Bitmap.createBitmap(bmp, 0, 0, bmp.getWidth(), bmp.getHeight(), matrix, true);        captured.setImageBitmap(bmp);        Observable.timer(1, TimeUnit.SECONDS)                .observeOn(AndroidSchedulers.mainThread())                .compose(this.<Long>bindUntilEvent(ActivityEvent.PAUSE))                .subscribeOn(Schedulers.newThread())                .subscribe(new Consumer<Long>() {                    @Override                    public void accept(@NonNull Long aLong) throws Exception {                        captured.setImageBitmap(null);                    }                });    }    @Override    public void onsetCardImg(Bitmap bmp) {    }    @Override    public void onsetCardInfo(CardInfoRk123x cardInfo) {        if(courTypes.getString(cardInfo.cardId()).equals(PersonType.KuGuan)){            if (getState(No_one_OperateState.class)) {                global_Operation.setState(new One_man_OperateState());                pp.capture();                cg_User1.setCourIds(courIds.getString(cardInfo.cardId()));                cg_User1.setName(cardInfo.name());                cg_User1.setCardId(cardInfo.cardId());            } else if (getState(Two_man_OperateState.class)) {                if (!cardInfo.cardId().equals(cg_User1.getCardId())) {                    cg_User1.setCourIds(courIds.getString(cardInfo.cardId()));                    cg_User1.setName(cardInfo.name());                    cg_User1.setCardId(cardInfo.cardId());                    pp.capture();                    EventBus.getDefault().post(new PassEvent());                    iv_lock.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_lock_unlock));                } else if (cardInfo.cardId().equals(cg_User1.getCardId())) {                    tv_info.setText("请不要连续输入相同的管理员信息");                }            }        }    }    @Override    public void onBackPressed() {        super.onBackPressed();    }    private Boolean getState(Class stateClass) {        if (global_Operation.getState().getClass().getName().equals(stateClass.getName())) {            return true;        } else {            return false;        }    }    private void OpenDoorRecord(boolean leagl){        JSONObject jsonObject = new JSONObject();        if(leagl){            try {                jsonObject.put("courIds1", cg_User1.getCourIds());                jsonObject.put("courIds2", cg_User2.getCourIds());                jsonObject.put("id1", cg_User1.getCardId());                jsonObject.put("id2", cg_User2.getCardId());                jsonObject.put("name1", cg_User1.getName());                jsonObject.put("name2", cg_User2.getName());                jsonObject.put("photo1", cg_User1.getPhoto());                jsonObject.put("photo2", cg_User2.getPhoto());                jsonObject.put("datetime", TimeUtils.getNowString());                jsonObject.put("state", "y");            } catch (JSONException e) {                e.printStackTrace();            }        }else{            try {                jsonObject.put("datetime", TimeUtils.getNowString());                jsonObject.put("state", "n");            } catch (JSONException e) {                e.printStackTrace();            }        }        final ProgressDialog progressDialog = new ProgressDialog(IndexActivity.this);        RetrofitGenerator.getOpenDoorRecordApi().openDoorRecord(config.getString("key"),jsonObject.toString())                .subscribeOn(Schedulers.io())                .unsubscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Observer<ResponseBody>() {                    @Override                    public void onSubscribe(@NonNull Disposable d) {                        progressDialog.setMessage("数据上传中，请稍候");                        progressDialog.show();                    }                    @Override                    public void onNext(@NonNull ResponseBody responseBody) {                        try{                            Map<String, String> infoMap = new Gson().fromJson(responseBody.string(),                                    new TypeToken<HashMap<String, String>>() {                                    }.getType());                            if(infoMap.get("result").equals("true")){                                tv_info.setText("上传成功");                            }else if(infoMap.get("result").equals("false")){                                tv_info.setText("上传失败");                            }else if(infoMap.get("result").equals("dataErr")){                                tv_info.setText("上传的json数据有错");                            }else if(infoMap.get("result").equals("dataErr")){                                tv_info.setText("数据库操作有错");                            }                        }catch (IOException e){                            e.printStackTrace();                        }                    }                    @Override                    public void onError(@NonNull Throwable e) {                        e.printStackTrace();                        progressDialog.dismiss();                        tv_info.setText("无法连接到服务器");                    }                    @Override                    public void onComplete() {                        progressDialog.dismiss();                        cg_User1 = new User();                        cg_User2 = new User();                    }                });    }}