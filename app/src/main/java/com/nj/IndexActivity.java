package com.nj;import android.content.Intent;import android.gesture.Gesture;import android.gesture.GestureLibraries;import android.gesture.GestureLibrary;import android.gesture.GestureOverlayView;import android.gesture.Prediction;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.os.Bundle;import android.os.Environment;import android.util.Log;import android.view.SurfaceView;import android.widget.ImageView;import android.widget.TextView;import com.blankj.utilcode.util.ActivityUtils;import com.blankj.utilcode.util.AppUtils;import com.blankj.utilcode.util.NetworkUtils;import com.blankj.utilcode.util.ToastUtils;import com.drv.card.CardInfoRk123x;import com.jakewharton.rxbinding2.widget.RxTextView;import com.nj.EventBus.LockUpEvent;import com.nj.EventBus.OpenDoorEvent;import com.nj.EventBus.PassEvent;import com.nj.EventBus.TemHumEvent;import com.nj.Service.SwitchService;import com.nj.State.OperationState.No_one_OperateState;import com.nj.State.OperationState.One_man_OperateState;import com.nj.State.OperationState.Operation;import com.nj.State.OperationState.Two_man_OperateState;import com.nj.Tools.ServerConnectionUtil;import com.trello.rxlifecycle2.android.ActivityEvent;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import java.io.File;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.concurrent.TimeUnit;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import io.reactivex.Observable;import io.reactivex.ObservableSource;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.annotations.NonNull;import io.reactivex.disposables.Disposable;import io.reactivex.functions.Consumer;import io.reactivex.functions.Function;import io.reactivex.schedulers.Schedulers;/** * Created by zbsz on 2017/8/25. */public class IndexActivity extends FunctionActivity {    private static final String PREFS_NAME = "UserInfo";    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    String TAG = "IndexActivity";    Intent intent;    Disposable disposableTips;    No_one_OperateState no_one_operateState = new No_one_OperateState();    @BindView(R.id.img_captured)    ImageView captured;    @BindView(R.id.tv_info)    TextView tv_info;    @BindView(R.id.iv_lock)    ImageView iv_lock;    @BindView(R.id.tv_time)    TextView tv_time;    @BindView(R.id.tv_temp)    TextView tv_temperature;    @BindView(R.id.tv_humid)    TextView tv_humidity;    @BindView(R.id.gestures_overlay)    GestureOverlayView gestures;    @OnClick(R.id.surfaceView) void display(){        pp.setDisplay(surfaceView.getHolder());        fpp.fpIdentify();    }    @OnClick(R.id.iv_lock) void showVer(){        ToastUtils.showLong(AppUtils.getAppVersionName());    }    GestureLibrary mGestureLib;    Operation global_Operation;    @OnClick(R.id.iv_person_add)    void addPerson() {        ActivityUtils.startActivity(getPackageName(), getPackageName() + ".AddPersonActivity");    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_index);        ButterKnife.bind(this);        EventBus.getDefault().register(this);        openService();        surfaceView = (SurfaceView) findViewById(R.id.surfaceView);        Observable.interval(0, 1, TimeUnit.SECONDS)                .observeOn(AndroidSchedulers.mainThread())                .compose(this.<Long>bindUntilEvent(ActivityEvent.DESTROY))                .subscribe(new Consumer<Long>() {                    @Override                    public void accept(@NonNull Long aLong) throws Exception {                        tv_time.setText(formatter.format(new Date(System.currentTimeMillis())));                    }                });        disposableTips = RxTextView.textChanges(tv_info)                .debounce(60, TimeUnit.SECONDS)                .switchMap(new Function<CharSequence, ObservableSource<String>>() {                    @Override                    public ObservableSource<String> apply(@NonNull CharSequence charSequence) throws Exception {                        return Observable.just("等待用户操作");                    }                })                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Consumer<String>() {                    @Override                    public void accept(@NonNull String s) throws Exception {                        tv_info.setText(s);                    }                });        global_Operation = new Operation(no_one_operateState);        gestures.setGestureStrokeType(GestureOverlayView.GESTURE_STROKE_TYPE_MULTIPLE);        gestures.setGestureVisible(false);        gestures.addOnGesturePerformedListener(new GestureOverlayView.OnGesturePerformedListener() {            @Override            public void onGesturePerformed(GestureOverlayView overlay,                                           Gesture gesture) {                ArrayList<Prediction> predictions = mGestureLib.recognize(gesture);                if (predictions.size() > 0) {                    Prediction prediction = (Prediction) predictions.get(0);                    // 匹配的手势                    if (prediction.score > 1.0) { // 越匹配score的值越大，最大为10                        if (prediction.name.equals("setting")) {                            NetworkUtils.openWirelessSettings();                        }                    }                }            }        });        if (mGestureLib == null) {            mGestureLib = GestureLibraries.fromRawResource(this, R.raw.gestures);            mGestureLib.load();        }        autoUpdate();    }    private void autoUpdate() {        new ServerConnectionUtil().download("http://124.172.232.89:8050/daServer/updateADA.do?ver="+AppUtils.getAppVersionName()+"&daid=1234567890&url=http://222.189.59.244/"  , new ServerConnectionUtil.Callback() {            @Override            public void onResponse(String response) {                if (response != null) {                    if (response.equals("true")) {                        AppUtils.installApp(new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "Download" + File.separator + "app-release.apk"), "application/vnd.android.package-archive");                    }                }            }        });    }    void openService() {        intent = new Intent(IndexActivity.this, SwitchService.class);        startService(intent);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetTemHumEvent(TemHumEvent event) {        tv_temperature.setText(event.getTem() + "℃");        tv_humidity.setText(event.getHum() + "%");    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetOpenDoorEvent(OpenDoorEvent event) {        global_Operation.setState(no_one_operateState);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetLockUpEvent(LockUpEvent event) {        iv_lock.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_lockup));    }    @Override    public void onResume() {        super.onResume();        global_Operation.setState(no_one_operateState);        tv_info.setText("等待用户操作");        Log.e(TAG, "onResume");    }    @Override    protected void onDestroy() {        super.onDestroy();        EventBus.getDefault().unregister(this);        //stopService(intent);        disposableTips.dispose();    }    @Override    public void onCaremaText(String s) {        pp.setDisplay(surfaceView.getHolder());    }    @Override    public void onSetImg(Bitmap bmp) {    }    @Override    public void onText(String msg) {        if ("请确认指纹是否已登记".equals(msg)) {            tv_info.setText("请确认指纹是否已登记,再重试");        } else if ("松开手指".equals(msg)) {            tv_info.setText(msg);        }    }    @Override    public void onFpSucc(String msg) {        loadMessage(msg.substring(3, msg.length()));    }    String last;    private void loadMessage(String sp) {        if (getState(No_one_OperateState.class)) {            global_Operation.setState(new One_man_OperateState());            pp.capture();            last = sp;            Observable.timer(60, TimeUnit.SECONDS).subscribeOn(Schedulers.newThread())                    .compose(this.<Long>bindUntilEvent(ActivityEvent.DESTROY))                    .observeOn(AndroidSchedulers.mainThread())                    .subscribe(new Observer<Long>() {                        @Override                        public void onSubscribe(Disposable d) {                        }                        @Override                        public void onNext(Long aLong) {                            global_Operation.setState(no_one_operateState);                        }                        @Override                        public void onError(Throwable e) {                        }                        @Override                        public void onComplete() {                        }                    });        } else if (getState(Two_man_OperateState.class)) {            if (!sp.equals(last)) {                pp.capture();                EventBus.getDefault().post(new PassEvent());                iv_lock.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_lock_unlock));            } else if (sp.equals(last)) {                tv_info.setText("请不要连续输入相同的管理员信息");            }        }    }    @Override    public void onGetPhoto(Bitmap bmp) {        if (getState(One_man_OperateState.class)) {            tv_info.setText("管理员打卡,请继续管理员操作");            global_Operation.doNext();        } else if (getState(Two_man_OperateState.class)) {            tv_info.setText("管理员打卡，双人管理成功");            global_Operation.doNext();        }        Matrix matrix = new Matrix();        matrix.postScale(0.5f, 0.5f);        bmp = Bitmap.createBitmap(bmp, 0, 0, bmp.getWidth(), bmp.getHeight(), matrix, true);        captured.setImageBitmap(bmp);        Observable.timer(1, TimeUnit.SECONDS)                .observeOn(AndroidSchedulers.mainThread())                .compose(this.<Long>bindUntilEvent(ActivityEvent.DESTROY))                .subscribeOn(Schedulers.newThread())                .subscribe(new Consumer<Long>() {                    @Override                    public void accept(@NonNull Long aLong) throws Exception {                        captured.setImageBitmap(null);                    }                });    }    @Override    public void onsetCardImg(Bitmap bmp) {        Matrix matrix = new Matrix();        matrix.postScale(0.5f, 0.5f);        bmp = Bitmap.createBitmap(bmp, 0, 0, bmp.getWidth(), bmp.getHeight(), matrix, true);        captured.setImageBitmap(bmp);        Observable.timer(1, TimeUnit.SECONDS)                .observeOn(AndroidSchedulers.mainThread())                .compose(this.<Long>bindUntilEvent(ActivityEvent.DESTROY))                .subscribeOn(Schedulers.newThread())                .subscribe(new Consumer<Long>() {                    @Override                    public void accept(@NonNull Long aLong) throws Exception {                        captured.setImageBitmap(null);                    }                });    }    @Override    public void onsetCardInfo(CardInfoRk123x cardInfo) {        tv_info.setText("姓名:"+cardInfo.name()+"身份证号"+cardInfo.cardId());    }    @Override    public void onBackPressed() {        super.onBackPressed();    }    private Boolean getState(Class stateClass) {        if (global_Operation.getState().getClass().getName().equals(stateClass.getName())) {            return true;        } else {            return false;        }    }}